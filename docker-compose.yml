version: '3.9'
services:
  backend1:
    restart: always
    image: ghcr.io/xleshka/mentor_link_school:latest
    env_file:
      - .env
    container_name: backend1
    expose:
     - "8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend-network
  backendws:
    restart: always
    image: ghcr.io/xleshka/mentor_link_school-ws:latest
    env_file:
      - .env
    environment:
      BOT_API_TOKEN: ${BOT_API_TOKEN}
    container_name: backendws
    expose:
      - "8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend-network
  backend2:
    restart: always
    image: ghcr.io/xleshka/mentor_link_school:latest
    env_file:
      - .env
    container_name: backend2
    expose:
      - "8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend-network
  postgres:
    env_file:
      - .env
    restart: always
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
  minio:
      restart: always
      container_name: minio_container
      image: minio/minio:latest
      env_file:
        - .env
      command: server /data --console-address ":9001"
      environment:
        MINIO_HOST: ${MINIO_HOST}
        MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
        MINIO_ROOT_USER: ${MINIO_ROOT_USER}
        MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        MINIO_PORT: ${MINIO_PORT}
      volumes:
        - minio_data:/data
      expose:
        - "9000"
        - "9001"
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://${MINIO_HOST}:${MINIO_PORT}/minio/health/live" ]
        interval: 5s
        timeout: 30s
        retries: 3
        start_period: 10s
      networks:
        - backend-network
  redis:
    env_file:
     - .env
    restart: always
    image: redis:latest
    container_name: redis
    expose:
     - "6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 10s
      start_interval: 5s
    volumes:
      - redis-data:/data
    networks:
      - backend-network
  zoo:
    image: confluentinc/cp-zookeeper:latest
    container_name: zoo
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    expose:
      - "2181"
    networks:
      - backend-network
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    expose:
      - "9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zoo:2181
    depends_on:
      - zoo
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --list --bootstrap-server kafka:9092" ]
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 10s
      start_interval: 5s
  nginx:
    restart: always
    image: nginx:latest
    container_name: nginx_container
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/conf.d/default.conf
      - /home/ubuntu/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend1
      - backend2
      - backendws
    networks:
      - backend-network
networks:
 backend-network:
volumes:
  postgres_data:
  minio_data:
  redis-data:
  kafka-data:
