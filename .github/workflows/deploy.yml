name: Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    types:
      - closed
    branches: [ "master" ]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        env:
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          fetch-depth: 0

      - name: Install SSH keys
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config && chmod 600 ~/.ssh/config
          echo "SSH_HOST: ${{ secrets.SSH_HOST }}"
          echo "SSH_USER: ${{ secrets.SSH_USER }}"
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
          ssh-agent sh -c "ssh-add ~/.ssh/id_rsa"
          ssh-keyscan -H "$SSH_HOST"
          if docker context inspect remote &>/dev/null; then
            echo "Docker context 'remote' already exists. Skipping creation."
          else
            docker context create remote --docker host=ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}
          fi
      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection:"
          ssh -v -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} --password-stdin echo "SSH connection successful"
      - name: Log in to the Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Docker Context
        run: docker context use remote

      - name: Docker Compose Deployment
        run: |
          echo "Using Docker context:"
          docker context ls
          ssh -v -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} --password-stdin echo "SSH connection successful"
          ssh ~/.ssh/id_rsa docker compose -f docker-compose.yml up -d

      - name: Cleanup
        if: always()
        run: |
          rm -rf ~/.ssh