version: '3.9'
services:
  postgres:
    env_file:
      - dev.env
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  minio:
    restart: always
    container_name: minio_container
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    environment:
      MINIO_BUCKET_NAME: imagebucket
      MINIO_ROOT_USER: cooluser
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 30s
      retries: 3
      start_period: 10s
    networks:
      - backend-network
  zoo:
    image: confluentinc/cp-zookeeper:latest
    container_name: zoo
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    expose:
      - "2181:2181"
    networks:
      - backend-network
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
    depends_on:
      - zoo
    networks:
      - backend-network
  redis:
    env_file:
      - dev.env
    restart: unless-stopped
    image: redis:latest
    container_name: cache
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: [ "CMD", "cache-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 3
      start_period: 10s
      start_interval: 5s
    volumes:
      - redis-data:/data
    networks:
      - backend-network
networks:
  backend-network:
volumes:
  postgres_data:
  minio_data:
  redis-data:


