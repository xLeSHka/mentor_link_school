basePath: /
definitions:
  groupsRoute.ReqCreateGroupDto:
    properties:
      name:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  groupsRoute.ReqEditGroup:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  groupsRoute.ReqUpdateRole:
    properties:
      role:
        type: string
    required:
    - role
    type: object
  groupsRoute.RespCreateGroup:
    properties:
      group_id:
        type: string
      invite_code:
        type: string
    type: object
  groupsRoute.RespGetMember:
    properties:
      avatar_url:
        type: string
      name:
        type: string
      roles:
        items:
          type: string
        type: array
      user_id:
        type: string
    required:
    - name
    - roles
    - user_id
    type: object
  groupsRoute.RespGetRoles:
    properties:
      roles:
        items:
          type: string
        type: array
    type: object
  groupsRoute.RespStat:
    properties:
      accepted_request_count:
        type: integer
      conversion:
        type: number
      help_request_count:
        type: integer
      mentors_count:
        type: integer
      rejected_request_count:
        type: integer
      students_count:
        type: integer
    type: object
  groupsRoute.RespUpdateCode:
    properties:
      code:
        type: string
    type: object
  groupsRoute.RespUploadAvatarDto:
    properties:
      url:
        type: string
    type: object
  httpError.HTTPError:
    properties:
      message:
        type: string
    type: object
  mentorsRoute.ReqUpdateRequest:
    properties:
      id:
        type: string
      status:
        type: boolean
    required:
    - id
    - status
    type: object
  mentorsRoute.RespGetMyStudent:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      name:
        type: string
      student_id:
        type: string
      telegram:
        type: string
    required:
    - name
    - student_id
    type: object
  mentorsRoute.RespGetRequest:
    properties:
      avatar_url:
        type: string
      goal:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: string
      student_bio:
        type: string
      student_telegram:
        type: string
      user_id:
        type: string
    type: object
  studentsRoute.ReqCreateHelp:
    properties:
      goal:
        type: string
    required:
    - goal
    type: object
  studentsRoute.RespGetHelp:
    properties:
      avatar_url:
        type: string
      goal:
        type: string
      id:
        type: string
      mentor_bio:
        type: string
      mentor_id:
        type: string
      mentor_name:
        type: string
      mentor_telegram:
        type: string
      status:
        type: string
    type: object
  studentsRoute.RespGetMentor:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      mentor_id:
        type: string
      name:
        type: string
      telegram:
        type: string
    required:
    - mentor_id
    - name
    type: object
  studentsRoute.RespGetMyMentor:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      mentor_id:
        type: string
      name:
        type: string
      telegram:
        type: string
    required:
    - mentor_id
    - name
    type: object
  usersRoute.ReqEditUser:
    properties:
      bio:
        maxLength: 500
        type: string
      name:
        maxLength: 120
        minLength: 1
        type: string
      telegram:
        maxLength: 120
        minLength: 1
        type: string
    type: object
  usersRoute.ReqLoginDto:
    properties:
      password:
        maxLength: 60
        minLength: 8
        type: string
      telegram:
        maxLength: 120
        minLength: 1
        type: string
    required:
    - password
    - telegram
    type: object
  usersRoute.ReqRegisterDto:
    properties:
      name:
        maxLength: 120
        minLength: 1
        type: string
      password:
        maxLength: 60
        minLength: 8
        type: string
      telegram:
        maxLength: 120
        minLength: 1
        type: string
    required:
    - name
    - password
    - telegram
    type: object
  usersRoute.ResGetGroup:
    properties:
      avatar_url:
        type: string
      group_id:
        type: string
      invite_code:
        type: string
      name:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
  usersRoute.ResGetProfile:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      id:
        type: string
      name:
        type: string
      telegram:
        type: string
    type: object
  usersRoute.RespJoinGroup:
    properties:
      status:
        type: string
    type: object
  usersRoute.RespLoginDto:
    properties:
      token:
        type: string
    type: object
  usersRoute.RespOtherProfile:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      id:
        type: string
      name:
        type: string
      telegram:
        type: string
    type: object
  usersRoute.RespRegisterDto:
    properties:
      token:
        type: string
    type: object
  usersRoute.RespUploadAvatarDto:
    properties:
      url:
        type: string
    type: object
host: localhost
info:
  contact:
    name: API Support
    url: http://www.swagger.io/support
  description: GetMentor API docs
  title: GetMentor API
  version: "1.0"
paths:
  /api/groups/{groupID}/edit:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/groupsRoute.ReqEditGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Редактирование организации
      tags:
      - Groups
  /api/groups/{groupID}/inviteCode:
    post:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groupsRoute.RespUpdateCode'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "403":
          description: Нет прав доступа
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Обновить код приглашения
      tags:
      - Groups
  /api/groups/{groupID}/members:
    get:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/groupsRoute.RespGetMember'
            type: array
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "403":
          description: Нет прав доступа
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Список участников организации
      tags:
      - Groups
  /api/groups/{groupID}/members/{userID}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groupsRoute.RespGetRoles'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "403":
          description: Нет прав доступа
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "404":
          description: Нет такого юзера
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: получить роли юзера
      tags:
      - Groups
  /api/groups/{groupID}/members/{userID}/role:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/groupsRoute.ReqUpdateRole'
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "403":
          description: Нет прав доступа
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "404":
          description: Нет такого юзера
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Удалить роль юзеру
      tags:
      - Groups
    post:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/groupsRoute.ReqUpdateRole'
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "403":
          description: Нет прав доступа
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "404":
          description: Нет такого юзера
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Добавить роль юзеру
      tags:
      - Groups
  /api/groups/{groupID}/mentors/requests:
    get:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/mentorsRoute.RespGetRequest'
            type: array
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "403":
          description: Ошибка доступа
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "404":
          description: Нет такого запроса
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Получить входящие запросы
      tags:
      - Mentors
    post:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/mentorsRoute.ReqUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "404":
          description: Нет такого запроса
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Изменить состояние заявки
      tags:
      - Mentors
  /api/groups/{groupID}/mentors/students:
    get:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/mentorsRoute.RespGetMyStudent'
            type: array
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "403":
          description: Ошибка доступа
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "404":
          description: Нет такого пользователя
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Получить моих учеников
      tags:
      - Mentors
  /api/groups/{groupID}/stat:
    get:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groupsRoute.RespStat'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "403":
          description: Нет прав доступа
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Получить статистику организации
      tags:
      - Groups
  /api/groups/{groupID}/students/{userID}/requests:
    post:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/studentsRoute.ReqCreateHelp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Кинуть запрос ментору
      tags:
      - Students
  /api/groups/{groupID}/students/availableMentors:
    get:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/studentsRoute.RespGetMentor'
            type: array
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Получение доступных менторов
      tags:
      - Students
  /api/groups/{groupID}/students/mentors:
    get:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/studentsRoute.RespGetMyMentor'
            type: array
        "400":
          description: Невалидный запрос
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Получение моих менторов
      tags:
      - Students
  /api/groups/{groupID}/students/requests:
    get:
      consumes:
      - application/json
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/studentsRoute.RespGetHelp'
            type: array
        "400":
          description: Невалидный запрос
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Получить список моих запросов
      tags:
      - Students
  /api/groups/{groupID}/uploadAvatar:
    post:
      consumes:
      - multipart/form-data
      description: Загрузка аватарки. Возвращает ссылку на аватарку, которая действует
        7 дней
      parameters:
      - description: Изображение для загрузки
        in: formData
        name: image
        required: true
        type: file
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groupsRoute.RespUploadAvatarDto'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "403":
          description: Нет прав доступа
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Загрузка аватарки
      tags:
      - Groups
  /api/users/auth/login:
    post:
      consumes:
      - application/json
      description: Аунтефикация юзера. Возвращает токен, который в дальнейшем нужно
        передавать в заголовке "Authorization" в формате "Bearer <токен>".
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/usersRoute.ReqLoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersRoute.RespLoginDto'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Аунтефикация
      tags:
      - Users
  /api/users/auth/register:
    post:
      consumes:
      - application/json
      description: регистрация юзера. Возвращает токен, который в дальнейшем нужно
        передавать в заголовке "Authorization" в формате "Bearer <токен>".
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/usersRoute.ReqRegisterDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersRoute.RespRegisterDto'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "409":
          description: Пользователь с таким email уже зарегистрирован
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: регистрация
      tags:
      - Users
  /api/users/groups/:
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usersRoute.ResGetGroup'
            type: array
        "400":
          description: Невалидный запрос
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Получение организаций пользователя
      tags:
      - Users
  /api/users/groups/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/groupsRoute.ReqCreateGroupDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/groupsRoute.RespCreateGroup'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Создание организации
      tags:
      - Groups
  /api/users/join/{code}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Invite code
        in: path
        name: code
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersRoute.RespJoinGroup'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Присоединиться к организации по коду
      tags:
      - Users
  /api/users/profile/:
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersRoute.ResGetProfile'
        "400":
          description: Невалидный запрос
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Получение профиля
      tags:
      - Users
  /api/users/profile/{profileID}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Profile ID
        in: path
        name: profileID
        required: true
        type: string
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersRoute.RespOtherProfile'
        "400":
          description: Невалидный запрос
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Получение чужого профиля
      tags:
      - Users
  /api/users/profile/edit:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/usersRoute.ReqEditUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "404":
          description: Нет такого пользователя
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "409":
          description: Пользователь с таким email уже зарегистрирован
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Редактирование профиля
      tags:
      - Users
  /api/users/uploadAvatar:
    post:
      consumes:
      - multipart/form-data
      description: Загрузка аватарки. Возвращает ссылку на аватарку, которая действует
        7 дней
      parameters:
      - description: Изображение для загрузки
        in: formData
        name: image
        required: true
        type: file
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersRoute.RespUploadAvatarDto'
        "400":
          description: Ошибка валидации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "401":
          description: Ошибка авторизации
          schema:
            $ref: '#/definitions/httpError.HTTPError'
        "500":
          description: Что-то пошло не так
          schema:
            $ref: '#/definitions/httpError.HTTPError'
      summary: Загрузка аватарки для пользователя
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
