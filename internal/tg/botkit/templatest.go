package botkit

import (
	"fmt"
	"github.com/google/uuid"
	"github.com/xLeSHka/mentorLinkSchool/internal/models"
	"strings"
)

var (
	MainMenuTemplate         = "[–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é]"
	MainMenuTextTemplate     = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üôè"
	AuthedMenuTemplate       = "[–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é]"
	RegisterMenuTemplate     = "[–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é]"
	RegisterMenuTextTemplate = func(id uuid.UUID, name, telegram, password string) string {
		return fmt.Sprintf("–í—ã ü´µ\nID: %s üÜî\n–ò–º—è: %s ü™™\n–¢–µ–ª–µ–≥—Ä–∞–º: %s \n–ü–∞—Ä–æ–ª—å: %s üîë", id, name, telegram, password)
	}
	ValidatePasswordTemplate = func(minLength, maxLength, hasLower, hasUpper, hasDigit, hasSymbol bool) string {
		build := strings.Builder{}
		if minLength {
			build.Write([]byte(fmt.Sprintf("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ‚úîÔ∏è\n")))
		} else {
			build.Write([]byte(fmt.Sprintf("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ‚ùå\n")))
		}
		if maxLength {
			build.Write([]byte(fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ‚úîÔ∏è\n")))
		} else {
			build.Write([]byte(fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ‚ùå\n")))
		}
		if hasLower {
			build.Write([]byte(fmt.Sprintf("–°—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞: ‚úîÔ∏è\n")))
		} else {
			build.Write([]byte(fmt.Sprintf("–°—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞: ‚ùå\n")))
		}
		if hasUpper {
			build.Write([]byte(fmt.Sprintf("–ü—Ä–æ–ø–∏—Å–Ω–∞—è –±—É–∫–≤–∞: ‚úîÔ∏è\n")))
		} else {
			build.Write([]byte(fmt.Sprintf("–ü—Ä–æ–ø–∏—Å–Ω–∞—è –±—É–∫–≤–∞: ‚ùå\n")))
		}
		if hasDigit {
			build.Write([]byte(fmt.Sprintf("–¶–∏—Ñ—Ä–∞: ‚úîÔ∏è\n")))
		} else {
			build.Write([]byte(fmt.Sprintf("–¶–∏—Ñ—Ä–∞: ‚ùå\n")))
		}
		if hasSymbol {
			build.Write([]byte(fmt.Sprintf("–°–∏–º–≤–æ–ª: ‚úîÔ∏è\n")))
		} else {
			build.Write([]byte(fmt.Sprintf("–°–∏–º–≤–æ–ª: ‚ùå\n")))
		}
		return build.String()
	}
	LoginMenuTemplate         = "[–ú–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]"
	ErrorMenuTemplate         = "[–û—à–∏–±–∫–∞]"
	InternalErrorTextTemplate = "–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! ü•∫üôè\n–í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞!"
	ProfileTextTemplate       = func(id uuid.UUID, name, bio string) string {
		return fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\nID: %s\n–ò–º—è: %s\n–ë–ò–û: %s", id, name, bio)
	}
	CreateGroupMenuTemplate = "[–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏]"
	CreateGroupTextTemplate = func(id uuid.UUID, name, inviteCode string) string {
		return fmt.Sprintf("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\nID: %s\n–ò–º—è: %s\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥: %s", id, name, inviteCode)
	}
	GroupMenuTemplate = "[–ú–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏]"
	GroupTextTemplate = func(id uuid.UUID, name string, inviteCode *string) string {
		builder := strings.Builder{}
		builder.Write([]byte(fmt.Sprintf("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è\nID: %s\n–ò–º—è: %s", id, name)))
		if inviteCode != nil {
			builder.Write([]byte(fmt.Sprintf("\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥: %s", *inviteCode)))
		}
		return builder.String()
	}
	MembersMenuTemplate     = "[–ú–µ–Ω—é —á–ª–µ–Ω–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏]"
	MembersMenuTextTemplate = func() string {
		return fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ —á–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏!")
	}
	MemberMenuTemplate     = "[–ú–µ–Ω—é —á–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏]"
	MemberMenuTextTemplate = func(id uuid.UUID, name string, bio *string, roles []*models.Role) string {
		builder := strings.Builder{}
		builder.WriteString(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\nID: %s\n–ò–º—è: %s\n", id, name))
		if bio != nil {
			builder.WriteString(fmt.Sprintf("–ë–ò–û: %s\n–†–æ–ª–∏: ", *bio))
		} else {
			builder.WriteString("–†–æ–ª–∏: ")
		}
		for _, role := range roles {
			switch role.Role {
			case "owner":
				builder.WriteString("üßë‚Äçüíº")
			case "mentor":
				builder.WriteString("üßë‚Äçüè´")
			case "student":
				builder.WriteString("üë®‚Äçüéì")
			}
		}
		return builder.String()
	}

	JoinMenuTemplate   = "[–ú–µ–Ω—é –≤—Ö–æ–¥–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é]"
	GroupsMenuTemplate = "[–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏]"
)
